[{"C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\index.js":"1","C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\App.js":"2","C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\reportWebVitals.js":"3","C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\Components\\Settings.js":"4","C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\Components\\FinalScreen.js":"5","C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\Components\\QuestionButton.js":"6","C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\Components\\VideoQuestion.tsx":"7","C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\store\\Reducer.tsx":"8","C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\Components\\Question.tsx":"9"},{"size":636,"mtime":1664259239515,"results":"10","hashOfConfig":"11"},{"size":926,"mtime":1663652575101,"results":"12","hashOfConfig":"11"},{"size":369,"mtime":1662353493471,"results":"13","hashOfConfig":"11"},{"size":2037,"mtime":1664259239474,"results":"14","hashOfConfig":"11"},{"size":1003,"mtime":1664261908247,"results":"15","hashOfConfig":"11"},{"size":2518,"mtime":1662370969855,"results":"16","hashOfConfig":"11"},{"size":2439,"mtime":1664349164946,"results":"17","hashOfConfig":"11"},{"size":1679,"mtime":1664346983508,"results":"18","hashOfConfig":"11"},{"size":2311,"mtime":1664347669580,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"6bdw44",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\index.js",[],["44","45"],"C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\App.js",["46"],"import { useSelector } from 'react-redux'\r\n\r\nimport Settings from './Components/Settings'\r\nimport Question from './Components/Question'\r\nimport FinalScreen from './Components/FinalScreen'\r\n\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  const questions = useSelector((state) => state.questions)\r\n  const questionIndex = useSelector((state) => state.index)\r\n\r\n  let component\r\n\r\n  if (questions.length && questionIndex + 1 <= questions.length) {\r\n    component = <Question />\r\n  } else if (!questions.length) {\r\n    component = <Settings />\r\n  } else {\r\n    component = <FinalScreen />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    <div className=\"vid-container\">\r\n    <iframe src=\"https://www.youtube.com/embed/06tTwaaxbRc?controls=0&autoplay=1&mute=1&playlist=06tTwaaxbRc&loop=1\"></iframe>\r\n    </div>\r\n    <div className=\"App\">\r\n      <div className=\"app-container\">{component}</div>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\reportWebVitals.js",[],"C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\Components\\Settings.js",["47","48","49"],"import React, {useState} from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport QuestionButton from './QuestionButton'\r\n\r\nfunction Settings () {\r\n    const questionCategory = useSelector((state) => state.options.question_category)\r\n    const questionType = useSelector((state) => state.options.question_type)\r\n    const questionAmount = useSelector((state) => state.options.amount_of_questions)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    /* Selection Handlers*/\r\n    const handleGameTypeChange = event => {\r\n      dispatch({\r\n        type: 'CHANGE_TYPE',\r\n        value: event.target.value\r\n      })\r\n    }\r\n\r\nconsole.log(questionType)\r\n\r\n    const handleQuestionNumChange = event => {\r\n      dispatch({\r\n        type: 'CHANGE_AMOUNT',\r\n        value: event.target.value\r\n      })\r\n    }\r\n\r\n        return (\r\n            <div className='options'>\r\n              <div>\r\n                <h2>Select Game Type:</h2>\r\n                <select onChange={handleGameTypeChange}>\r\n                  <option>Multiple Choice</option>\r\n                  <option>True/False</option>\r\n                  <option>Guess That Player</option>\r\n                  <option>All</option>\r\n                </select>\r\n              </div>\r\n              {/* <div>\r\n                <h2>Select Difficulty:</h2>\r\n                <select value={questionDifficulty} onChange={handleDifficultyChange}>\r\n                  <option value=\"\" key=\"difficulty-0\">All</option>\r\n                  <option value=\"easy\" key=\"difficulty-1\">Easy</option>\r\n                  <option value=\"medium\" key=\"difficulty-2\">Medium</option>\r\n                  <option value=\"hard\" key=\"difficulty-3\">Hard</option>\r\n                </select>\r\n              </div> */}\r\n                <div>\r\n                <h2>Number of Questions:</h2>\r\n                <input type=\"number\" onChange={handleQuestionNumChange} />\r\n              </div>\r\n\r\n              <QuestionButton text=\"Show Me Your Moves!\"/>\r\n\r\n            </div>\r\n\r\n          )\r\n\r\n\r\n}\r\n\r\nexport default Settings","C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\Components\\FinalScreen.js",[],"C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\Components\\QuestionButton.js",["50","51","52","53","54","55","56","57"],"import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport questionArray from '../json/questions.json'\r\n\r\nfunction QuestionButton(props) {\r\n  /* State Declarations */\r\n  const questionCategory = useSelector((state) => state.options.question_category)\r\n  const questionType = useSelector((state) => state.options.question_type)\r\n  const questionAmount = useSelector((state) => state.options.amount_of_questions)\r\n  const questionIndex = useSelector((state) => state.index)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n\r\n  // const handleQuery = async () => {\r\n  //   let apiUrl = `https://opentdb.com/api.php?amount=${questionAmount}`\r\n\r\n    \r\n\r\n  //   if (questionType.length) {\r\n  //     apiUrl = apiUrl.concat(`&type=${questionType}`)\r\n  //   }\r\n\r\n  //   await fetch(apiUrl)\r\n  //     .then((res) => res.json())\r\n  //     .then((response) => {\r\n  //       setQuestions(response.results)\r\n  //     })\r\n\r\n  //   if (questionIndex > 0) {\r\n  //     dispatch({\r\n  //       type: 'SET_INDEX',\r\n  //       index: 0,\r\n  //     })\r\n\r\n  //     dispatch({\r\n  //       type: 'SET_SCORE',\r\n  //       score: 0,\r\n  //     })\r\n  //   }\r\n  // }\r\n\r\n\r\nconst populateQuestions = () => {\r\n  /* Reset score/questions from previous game */\r\n  if (questionIndex > 0) {\r\n        dispatch({\r\n          type: 'SET_INDEX',\r\n          index: 0,\r\n        })\r\n  \r\n        dispatch({\r\n          type: 'SET_SCORE',\r\n          score: 0,\r\n        })\r\n}\r\n\r\n/* parse questions from JSON into new object array, validate input for category, type, etc. */\r\nlet questionSet = Object.values(questionArray).filter((val, i)=> {\r\n  if (questionType == \"All\" && questionCategory == \"All\") {return true}\r\n  else if (questionType == \"All\") {return val.category == questionCategory}\r\n  else if (questionCategory == \"All\") {return val.type == questionType}\r\n  else {return val.type == questionType && val.category == questionCategory}\r\n}\r\n);\r\nconsole.log(questionSet)\r\n\r\n/* Randomize Question Array */\r\nlet shuffled = questionSet\r\n    .map(value => ({ value, sort: Math.random() }))\r\n    .sort((a, b) => a.sort - b.sort)\r\n    .map(({ value }) => value)\r\n\r\n/* Filter Randomized Selection by Number of Questions Selected */\r\nquestionSet = shuffled.filter((val, i)=> i <= questionAmount - 1)\r\n\r\ndispatch ({\r\n  type: 'SET_QUESTIONS', \r\n  questions: questionSet\r\n})\r\n\r\n\r\n}\r\n\r\n\r\n  // return <button onClick={handleQuery}>{props.text}</button>\r\n  return <button onClick={populateQuestions}>{props.text}</button>\r\n}\r\nexport default QuestionButton\r\n","C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\Components\\VideoQuestion.tsx",["58","59","60","61","62"],"import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport YouTube, {YouTubePlayer} from 'react-youtube'\r\n\r\nlet videoElement: YouTubePlayer = null;\r\n\r\nexport default function App() {\r\n  const questions = useSelector((state: any) => state.questions)\r\n  const questionIndex = useSelector((state: any) => state.index)\r\n  const isAnswered = useSelector((state: any) => state.isAnswered)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const question = questions[questionIndex]\r\n  const video_id = question.youtube_id\r\n  const stopTime = question.stop\r\n  const [isPaused, setIsPaused] = useState(false);\r\n\r\n    const params = {\r\n    playerVars: {\r\n      autoplay: 0,\r\n      modestbranding: 1,\r\n      controls: 0, \r\n      disablekb: 1\r\n    },\r\n  };\r\n\r\n  /* Advance to Next Question Upon Video Completion */\r\n\r\n  const checkState = () => {\r\n    let playerState: number = videoElement.target.playerInfo.playerState\r\n    if (playerState === 0) {\r\n      dispatch({\r\n        type: 'SET_ANSWERED',\r\n        answered: false,\r\n      })\r\n\r\n      dispatch({\r\n        type: 'SET_INDEX',\r\n        index: questionIndex + 1,\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  //get current time and video status in real time\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      if (videoElement && videoElement.target.getCurrentTime() > 0) {\r\n        const elapsed_seconds = videoElement.target.getCurrentTime();\r\n        let done = false\r\n\r\n        if (elapsed_seconds >= (stopTime + 0.2))\r\n        {\r\n          if (videoElement.target.playerInfo.playerState === 2) {videoElement.target.playVideo()}\r\n          done = true\r\n        }\r\n\r\n        /* Stop Video if Midpoint is reached */\r\n        if (elapsed_seconds >= stopTime && !done)\r\n        {\r\n          videoElement.target.seekTo(stopTime)\r\n          videoElement.target.pauseVideo()\r\n        }\r\n\r\n\r\n      }\r\n    }, 200);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isAnswered == true) {\r\n    console.log(\"Question Has Been Answered!\")\r\n    videoElement.target.seekTo(stopTime + 0.5)\r\n    videoElement.target.playVideo()\r\n    }\r\n  }, [isAnswered]);\r\n\r\n  const _onReady = (event: YouTubePlayer) => {\r\n    videoElement = event;\r\n  };\r\n\r\n  return (\r\n    <div className=\"video\">\r\n      <YouTube videoId={video_id} opts={params} onReady={_onReady} onStateChange={checkState}/>\r\n    </div>\r\n  );\r\n}","C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\store\\Reducer.tsx",[],"C:\\Users\\Tristan\\Documents\\Projects\\React\\Melee-Quiz-App\\src\\Components\\Question.tsx",["63","64","65","66","67"],"import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport VideoQuestion from './VideoQuestion'\r\n\r\nfunction Question() {\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null)\r\n\r\n  const score = useSelector((state: any) => state.score)\r\n  const questions = useSelector((state: any) => state.questions)\r\n  const questionIndex = useSelector((state: any) => state.index)\r\n  const answerSelected = useSelector((state: any) => state.isAnswered)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const question = questions[questionIndex]\r\n  const options = question.answers\r\n  const answer = question.correct_answer\r\n  const incorrect_answers = question.answers.filter((val: object) => val != answer)\r\n\r\n  const handleListItemClick = (event: any) => {\r\n    dispatch({\r\n      type: 'SET_ANSWERED',\r\n      answered: true,\r\n    })\r\n    setSelectedAnswer(event.target.textContent)\r\n\r\n    if (event.target.textContent === answer) {\r\n      dispatch({\r\n        type: 'SET_SCORE',\r\n        score: score + 1,\r\n      })\r\n    }\r\n\r\n    if (question.type != \"Guess That Player\" && questionIndex + 1 <= questions.length) {\r\n      setTimeout(() => {\r\n        dispatch({\r\n          type: 'SET_ANSWERED',\r\n          answered: false,\r\n        })\r\n        setSelectedAnswer(null)\r\n\r\n        dispatch({\r\n          type: 'SET_INDEX',\r\n          index: questionIndex + 1,\r\n        })\r\n      }, 5000)\r\n    }\r\n  }\r\n\r\n  const getClass = (option: string) => {\r\n    if (!answerSelected) {\r\n      return ``;\r\n    }\r\n\r\n\r\n    if (answerSelected) {\r\n    if (option === answer) {\r\n      return `correct off`\r\n    }\r\n\r\n    if (option === selectedAnswer) {\r\n      return `selected off`\r\n    }\r\n\r\n    else {return 'off'}\r\n\r\n  }\r\n\r\n  }\r\n\r\n  if (!question) {\r\n    return <div>Loading</div>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>Question {questionIndex + 1}</p>\r\n      <h3>{question.question}</h3>\r\n      {question.type==\"Guess That Player\" ? <VideoQuestion/> : ''}\r\n      <ul>\r\n        {options.map((option: string, i: number) => (\r\n          <li key={i} onClick={handleListItemClick} className={getClass(option)}>\r\n            {option}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <div>\r\n        Score: {score} / {questions.length}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Question\r\n",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":26,"column":5,"nodeType":"74","endLine":26,"endColumn":118},{"ruleId":"75","severity":1,"message":"76","line":1,"column":16,"nodeType":"77","messageId":"78","endLine":1,"endColumn":24},{"ruleId":"75","severity":1,"message":"79","line":6,"column":11,"nodeType":"77","messageId":"78","endLine":6,"endColumn":27},{"ruleId":"75","severity":1,"message":"80","line":8,"column":11,"nodeType":"77","messageId":"78","endLine":8,"endColumn":25},{"ruleId":"81","severity":1,"message":"82","line":60,"column":20,"nodeType":"83","messageId":"84","endLine":60,"endColumn":22},{"ruleId":"81","severity":1,"message":"82","line":60,"column":49,"nodeType":"83","messageId":"84","endLine":60,"endColumn":51},{"ruleId":"81","severity":1,"message":"82","line":61,"column":25,"nodeType":"83","messageId":"84","endLine":61,"endColumn":27},{"ruleId":"81","severity":1,"message":"82","line":61,"column":56,"nodeType":"83","messageId":"84","endLine":61,"endColumn":58},{"ruleId":"81","severity":1,"message":"82","line":62,"column":29,"nodeType":"83","messageId":"84","endLine":62,"endColumn":31},{"ruleId":"81","severity":1,"message":"82","line":62,"column":56,"nodeType":"83","messageId":"84","endLine":62,"endColumn":58},{"ruleId":"81","severity":1,"message":"82","line":63,"column":25,"nodeType":"83","messageId":"84","endLine":63,"endColumn":27},{"ruleId":"81","severity":1,"message":"82","line":63,"column":57,"nodeType":"83","messageId":"84","endLine":63,"endColumn":59},{"ruleId":"85","severity":1,"message":"86","line":17,"column":10,"nodeType":"77","messageId":"78","endLine":17,"endColumn":18},{"ruleId":"85","severity":1,"message":"87","line":17,"column":20,"nodeType":"77","messageId":"78","endLine":17,"endColumn":31},{"ruleId":"88","severity":1,"message":"89","line":73,"column":6,"nodeType":"90","endLine":73,"endColumn":8,"suggestions":"91"},{"ruleId":"81","severity":1,"message":"82","line":76,"column":20,"nodeType":"83","messageId":"84","endLine":76,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":81,"column":6,"nodeType":"90","endLine":81,"endColumn":18,"suggestions":"92"},{"ruleId":"85","severity":1,"message":"93","line":1,"column":27,"nodeType":"77","messageId":"78","endLine":1,"endColumn":36},{"ruleId":"85","severity":1,"message":"94","line":18,"column":9,"nodeType":"77","messageId":"78","endLine":18,"endColumn":26},{"ruleId":"81","severity":1,"message":"95","line":18,"column":74,"nodeType":"83","messageId":"84","endLine":18,"endColumn":76},{"ruleId":"81","severity":1,"message":"95","line":34,"column":23,"nodeType":"83","messageId":"84","endLine":34,"endColumn":25},{"ruleId":"81","severity":1,"message":"82","line":79,"column":21,"nodeType":"83","messageId":"84","endLine":79,"endColumn":23},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'questionCategory' is assigned a value but never used.","'questionAmount' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'isPaused' is assigned a value but never used.","'setIsPaused' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'stopTime'. Either include it or remove the dependency array.","ArrayExpression",["98"],["99"],"'useEffect' is defined but never used.","'incorrect_answers' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [stopTime]",{"range":"104","text":"105"},"Update the dependencies array to be: [isAnswered, stopTime]",{"range":"106","text":"107"},[1976,1978],"[stopTime]",[2181,2193],"[isAnswered, stopTime]"]